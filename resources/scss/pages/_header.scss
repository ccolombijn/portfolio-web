.header {
    @apply bg-slate-900 text-white h-screen pt-8;
    &__content {
        @apply text-center py-[15vh] align-middle;
        h2 ,p {
            @apply p-4;
        }
        .btn {
            @apply text-[22px];
        }
    }
    &__container {
        @apply relative z-50 backdrop-blur-xs;
        mask: linear-gradient(black, black, transparent);
    }
    &__title {
        
        @apply inline-block float-left;
        
        span {
            @apply hidden;
        }
        a {
            @apply inline-block bg-[url(/images/ccc_logo_wit.png)] bg-contain bg-center h-[80px] w-[100px] bg-no-repeat;
        }
    }
    nav {
        @apply p-8 pl-36;
        a {
            @apply text-xl font-thin inline-block relative mb-4;
            &::after {
                @apply absolute w-full h-1 mt-2 bottom-[-3] left-0 bg-[#ffffff70];
                content: '';
                transform: scaleX(0);
                transition: transform 0.25s ease-out;
                transform-origin: bottom right;
            }
            &:hover::after {
                transform: scaleX(1);
                transform-origin: bottom left;
            }
            &.active {
                @apply font-bold;
                &::after {
                    @apply bg-white;
                    transform: scaleX(1);
                }
            }
        }
        
    }
}

// 1. Genereer vier willekeurige kleuren voor de animatie
// We gebruiken hsl(hue, saturation, lightness) voor mooie, levendige kleuren.
// random(360) kiest een willekeurige tint op de kleurencirkel.
$start-color-1: hsl(random(360), 70%, 60%);
$start-color-2: hsl(random(360), 70%, 60%);
$end-color-1: hsl(random(360), 70%, 60%);
$end-color-2: hsl(random(360), 70%, 60%);

// 2. Registreer de CSS custom properties voor een vloeiende animatie in de browser.
// Deze stap is ongewijzigd maar nog steeds essentieel.
@property --color1 {
  syntax: '<color>';
  inherits: false;
  initial-value: #{$start-color-1}; // Gebruik de SCSS variabele als startwaarde
}
@property --color2 {
  syntax: '<color>';
  inherits: false;
  initial-value: #{$start-color-2}; // Gebruik de SCSS variabele als startwaarde
}
// Voeg hier eventueel @property regels toe voor posities als je die ook animeert.

// 3. Definieer de keyframes met de willekeurige SCSS-kleurvariabelen.
// De #{...} syntax is nodig om de SCSS-variabele correct in de CSS-code te plaatsen.
@keyframes moveAndChangeColor {
  0%, 100% {
    --color1: #{$start-color-1};
    --color2: #{$start-color-2};
  }
  50% {
    --color1: #{$end-color-1};
    --color2: #{$end-color-2};
  }
}

// 4. Pas de animatie toe op je achtergrond-element.
.animated-gradient-bg {
  position: absolute;
  inset: 0;
  width: 100%;
  height: 100%;
  background-color: #0f172a; // Donkere basiskleur
  
  // De radial gradients gebruiken nu de CSS custom properties.
  background-image: radial-gradient(ellipse 80% 80% at 20% 40%, var(--color1), transparent),
                    radial-gradient(ellipse 80% 80% at 80% 50%, var(--color2), transparent);
  
  // Koppel de animatie
  // animation: moveAndChangeColor 20s ease-in-out infinite;
}
.animated-clouds {
    position: absolute;
    inset: 0;
    width: 200%; 
    height: 100%;
    background-image: url('/images/CLOUDS.png');
    background-size: 50% auto;
    background-repeat: repeat-x; 
    opacity: 0.2; 
    animation: pan-clouds 320s linear infinite;
}
  

@keyframes pan-clouds {
    0% {
        transform: translateX(0);
    }
    100% {
        transform: translateX(-50%); 
    }
}